(()=>{var __webpack_modules__={46:()=>{eval("// @ts-nocheck\r\n(function (window){\r\n    'use strict';\r\n    console.log('Started to run DOM handler');\r\n    /**\r\n     * Provides some kind of Singleton pattern functionality for DOM handler\r\n     */\r\n    window['domhandlerisrunning'] = window['domhandlerisrunning'] || false;\r\n\r\n    if(window['domhandlerisrunning']){\r\n        return;\r\n    } \r\n    window['domhandlerisrunning'] = true;\r\n\r\n    const ELEMENT_NODE = 1;\r\n    const ATTRIBUTE_NODE = 2;\r\n\r\n    let elementLookup = new Array();\r\n    let eventsLookup = new Array();\r\n    let originals = {};\r\n    let blockedEventTypes = new Array();\r\n\r\n    /**\r\n     * Stores prototypes of EventTarget and HTMLElement\r\n     */\r\n    let prototypes = {\r\n        element: window.HTMLElement.prototype,\r\n        eventTarget: EventTarget.prototype\r\n    };\r\n    /**\r\n     * This callback function used by MutationObserver\r\n     * to detect if there is any of newly created eleemnts\r\n     * has inline events and if there are - registers then on\r\n     * DOM handler's registry.\r\n     * \r\n     * @param {Array<MutationRecord>} mutationsList \r\n     * @param {MutationObserver} observer \r\n     */\r\n    let mutationObserverCallback = function (mutationsList, observer){\r\n        mutationsList.forEach(function(mutation){\r\n            switch(mutation.type){\r\n                 case 'attributes':\r\n                   if(\r\n                        mutation.attributeName.toLowerCase().indexOf('on') === 0 && \r\n                        typeof(mutation.target.getAttribute(mutation.attributeName)) == 'string'\r\n                    ){\r\n                        \r\n                        _registerEventListener(\r\n                            mutation.target, \r\n                            _normilizeEventType(mutation.attributeName.toLowerCase()),\r\n                            mutation.target.getAttribute(mutation.attributeName),\r\n                            true,\r\n                            true\r\n                        );\r\n                    }\r\n                    break;\r\n                case 'childList':\r\n                    //added nodes\r\n                    for(let index = 0, maxIndex = mutation.addedNodes.length; index < maxIndex; index += 1){\r\n                        let node = mutation.addedNodes[index];\r\n\r\n                        if(node.nodeType != ELEMENT_NODE){\r\n                            continue;\r\n                        }\r\n\r\n                        for(let attributesIndex = 0, maxAttributesIndex = node.attributes.length; attributesIndex < maxAttributesIndex; attributesIndex += 1){\r\n                            let attribute = node.attributes[attributesIndex];\r\n                            \r\n                            if(attribute.nodeType != ATTRIBUTE_NODE || attribute.name.toLowerCase() == 'style'){\r\n                                continue;\r\n                            }\r\n\r\n                            if(attribute.name.toLowerCase().indexOf('on') === 0){\r\n                                _registerEventListener(\r\n                                    node, \r\n                                    _normilizeEventType(attribute.name.toLowerCase()),\r\n                                    node.getAttribute(attribute.name),\r\n                                    true,\r\n                                    true\r\n                                );\r\n                            }\r\n                        }\r\n                    }\r\n                    //removed nodes\r\n                    for (let index = 0, maxIndex = mutation.removedNodes.length; index < maxIndex; index += 1) {\r\n                        const element = mutation.removedNodes[index];\r\n                        if (element.id && elementLookup[element.id] && elementLookup[element.id].events) {\r\n                            const allEvenet = Object.keys(elementLookup[element.id].events);\r\n                            delete elementLookup[element.id];\r\n                            allEvenet.forEach(_event => {\r\n                                const event = \"_\" + _event;\r\n                                eventsLookup[event].Elements = eventsLookup[event].Elements.filter(el => el != element);\r\n                            });\r\n                        }\r\n                    }\r\n                    break;\r\n            }\r\n        });\r\n    };\r\n   \r\n    /**\r\n     * Whenever whole DOM is ready, start listening for DOM changes by\r\n     * MutationObserver.\r\n     */\r\n    window.document.addEventListener('DOMContentLoaded', function(){\r\n        let mutationObserver = new MutationObserver(mutationObserverCallback);\r\n\r\n        mutationObserver.observe(\r\n            window.document.body,\r\n            {\r\n                attributes: true, \r\n                childList: true, \r\n                subtree: true,\r\n                characterData: false \r\n            }\r\n        );\r\n\r\n        let allElementsWithInlineEvents = _findElementsWithArributePrefix('*', 'on');\r\n\r\n        for(let index = 0, maxIndex = allElementsWithInlineEvents.length; index < maxIndex; index += 1){\r\n            let element = allElementsWithInlineEvents[index];\r\n\r\n            for(let attributesIndex = 0, maxAttributesIndex = element.attributes.length; attributesIndex < maxAttributesIndex; attributesIndex += 1){\r\n                let attribute = element.attributes[attributesIndex];\r\n\r\n                if(attribute.name.startsWith('on')){\r\n                    _registerEventListener(\r\n                        element, \r\n                        _normilizeEventType(attribute.name.toLowerCase()),\r\n                        element.getAttribute(attribute.name),\r\n                        true,\r\n                        true\r\n                    );\r\n                }\r\n            }\r\n        }\r\n    });\r\n\r\n    /**\r\n     * Serches for DOM elements compliant with givent CSS selector\r\n     * and has attribute which name starts with given prefix.\r\n     * \r\n     * @param {string} selector \r\n     * @param {string} prefix \r\n     */\r\n    function _findElementsWithArributePrefix(selector, prefix)\r\n    {\r\n        return [].slice.call(document.querySelectorAll(selector)).filter(function (e)\r\n        {\r\n            return [].slice.call(e.attributes).filter(\r\n                function (attr)\r\n                {\r\n                    return attr.name.startsWith(prefix);\r\n                }\r\n            ).length;\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Generates RFC-4122 compliant\r\n     * v4 unique identifier \r\n     */\r\n    function _uuidv4() {\r\n        return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {\r\n            let r = Math.random() * 16 | 0, v = c == 'x' ? r : (r & 0x3 | 0x8);\r\n\r\n            return v.toString(16);\r\n        });\r\n    }\r\n\r\n    /**\r\n     * This delegate function used by Element.addEventListener wrapper \r\n     * instead of original native delegate.\r\n     * \r\n     * @param {string} type \r\n     * @param {function} listener \r\n     * @param {boolean} useCapture \r\n     */\r\n    function _wrappedAddEventListenerElementDelegate(type, listener, useCapture) {\r\n        let eventType = _normilizeEventType(type);\r\n        let targetElement = this;\r\n\r\n        if(blockedEventTypes.includes(eventType)){\r\n            return;\r\n        }\r\n\r\n        try {\r\n            _registerEventListener(targetElement, eventType, listener, useCapture);\r\n        } catch (error) {\r\n            console.log(error);\r\n         } finally {\r\n            originals['element'].addEventListener.call(this, type, listener, useCapture);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * This delegate function used by EventTarget.addEventListener wrapper \r\n     * instead of original native delegate.\r\n     * \r\n     * @param {string} type \r\n     * @param {function} listener \r\n     * @param {boolean} useCapture \r\n     */\r\n    function _wrappedAddEventListenerEventTargetDelegate(type, listener, useCapture) {\r\n        let eventType = _normilizeEventType(type);\r\n        let targetElement = this;\r\n\r\n        if(blockedEventTypes.includes(eventType)){\r\n            return;\r\n        }\r\n\r\n        try {\r\n            _registerEventListener(targetElement, eventType, listener, useCapture);\r\n        } catch (error) { \r\n            console.log(error);\r\n        } finally {\r\n            originals['eventTarget'].addEventListener.call(this, type, listener, useCapture);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Returns unified event name\r\n     * \r\n     * @param {string} type \r\n     */\r\n    function _normilizeEventType(type) {\r\n        type = type.toLowerCase();\r\n\r\n        if (type.indexOf(\"on\") === 0)\r\n        {\r\n            type = type.substring(2, type.length);\r\n        }\r\n        return type;\r\n    }\r\n\r\n    /**\r\n     * Serches given element in\r\n     * DOM handler's registry\r\n     * \r\n     * @param {HTMLElement} element \r\n     */\r\n    function _getElementFormLookup(element){\r\n        \r\n        if(typeof(element.id) === 'undefined' || element.id == null || element.id === ''){\r\n            element.id = 'uTester-' + _uuidv4();\r\n        }\r\n        if (!document.body.contains(element)) return { element: element, events: {} };\r\n        elementLookup[element.id] = elementLookup[element.id] || {\r\n            element: element,\r\n            events: {}\r\n        };\r\n\r\n        return elementLookup[element.id];\r\n    }\r\n\r\n    /**\r\n     * Serches enrty of given type in\r\n     * DOM handler's registry\r\n     * \r\n     * @param {string} type \r\n     */\r\n    function _getEventFromLookup(type) {\r\n        const _type = \"_\" + type;\r\n        eventsLookup[_type] = eventsLookup[_type] || {\r\n            Elements: new Array()\r\n        };\r\n\r\n        return eventsLookup[_type];\r\n    }\r\n\r\n    /**\r\n     * Register element that have event listener of assigned type into \r\n     * DOM handler's registtry\r\n     * \r\n     * @param {HTMLElement} element \r\n     * @param {string} type \r\n     * @param {Function} listener \r\n     * @param {boolean} useCapture \r\n     * @param {boolean} isInline \r\n     */\r\n    function _registerEventListener(element, type, listener, useCapture, isInline){\r\n        if(!element || element.nodeType != ELEMENT_NODE || !document.body || !document.body.contains(element) || (typeof listener === \"string\" && listener.length === 0)){\r\n            return;\r\n        }\r\n\r\n        let lookupItem = _getElementFormLookup(element);\r\n\r\n        lookupItem.events[type] = lookupItem.events[type] || {\r\n            listeners: []\r\n        };\r\n\r\n        lookupItem.events[type].listeners.push({\r\n            listener: listener,\r\n            useCapture: (useCapture === true),\r\n            isInline: (isInline === true)\r\n        });\r\n\r\n        let eventLookupItem = _getEventFromLookup(type);\r\n        \r\n        if(eventLookupItem.Elements.indexOf(element) === -1){\r\n            eventLookupItem.Elements.push(element);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Wraps Element.addEventListener method\r\n     */\r\n    function _wrapElementAddEventListener() {\r\n        originals['element'] = {\r\n            addEventListener: prototypes.element.addEventListener\r\n        };\r\n        \r\n        prototypes.element.addEventListener = _wrappedAddEventListenerElementDelegate;\r\n    }\r\n\r\n    /**\r\n     * Wraps targetEvent.addEventListener method\r\n     */\r\n    function _wrapEventTargetAddEventListener(){\r\n        originals['eventTarget'] = {\r\n            addEventListener: prototypes.eventTarget.addEventListener\r\n        };\r\n        \r\n        prototypes.eventTarget.addEventListener = _wrappedAddEventListenerEventTargetDelegate;\r\n    }\r\n\r\n    _wrapElementAddEventListener();\r\n    _wrapEventTargetAddEventListener();\r\n\r\n    /**\r\n     * Propogate DOM handler to window \r\n     * so everyone who need it can call it.\r\n     */\r\n    window.u1st_domHandler = {\r\n        /**\r\n         * Returns all elements that has event listeners resistered by DOM handler.\r\n         */\r\n        getAllElementsWithEvents: function () {\r\n            elementLookup.forEach((event) => {\r\n                elementLookup[event].Elements = elementLookup[event].Elements ? eventsLookup[event].Elements.filter(el => el.parentElement) : [];\r\n            })\r\n            return elementLookup;\r\n        },\r\n        /**\r\n         * Returns all elements taht has event listeners\r\n         * of given types.\r\n         * \r\n         * @param {Array<string>} types \r\n         * @param {boolean} includeOnlyBodyElements \r\n         */\r\n        getAllElementsWithSpecificEvents: function(types, includeOnlyBodyElements = false) {\r\n            let events = new Array();\r\n            const eventsMap = Object.keys(eventsLookup);\r\n            const _types = types.map(v => \"_\" + v);\r\n            for(let index = 0, maxIndex = _types.length; index < maxIndex; index += 1){\r\n                if (eventsMap.indexOf(_types[index]) > -1 && eventsLookup[_types[index]].Elements) {\r\n                    eventsLookup[_types[index]].Elements = eventsLookup[_types[index]].Elements.filter(el => el.parentElement);\r\n                    events[(_types[index]).substring(1)] = eventsLookup[_types[index]];\r\n                }\r\n            }\r\n\r\n            return events;\r\n        },\r\n        getElementEvents: function(element){\r\n            return _getElementFormLookup(element);\r\n        },\r\n        elementLookup,\r\n        eventsLookup\r\n    };\r\n\r\n    console.log('Done runing DOM handler.');\r\n})(window);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///46\n")}},__webpack_exports__={};__webpack_modules__[46]()})();